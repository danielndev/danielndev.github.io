{"version":3,"sources":["resources/Iron_man.png","components/MovieCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MovieCard","image","title","release","description","setMovie","to","onClick","style","textDecoration","className","src","alt","width","require","config","API_KEY","process","App","tabs","heading","API_URL","useState","movies","setMovies","query","setQuery","movieSearch","overview","release_date","backdrop_path","chosenMovie","setChosenMovie","useEffect","console","log","getData","changeSearch","e","target","value","submitSearch","url","a","fetch","response","json","data","results","i","length","poster_path","pop","LandingPage","ironManPic","setCurrentMovie","m","exact","path","id","onChange","onSubmit","placeholder","href","map","movie","key","backdrop","position","zIndex","height","backgroundColor","top","color","margin","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.53fbc215.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Iron_man.01471e75.png\";","import React from 'react';\r\nimport './MovieCard.css';\r\nimport {\r\n    Link\r\n  } from \"react-router-dom\";\r\nvar MovieCard = ({\r\n    image, \r\n    title,\r\n    description,\r\n    release,\r\n    setMovie\r\n}) => {\r\n    return(\r\n        <Link to=\"/movie_app/info\" onClick = {setMovie} style={{textDecoration:\"none\"}}>\r\n            <div className=\"MovieCard\" >\r\n                <img className=\"Movie-poster\" src={\"https://image.tmdb.org/t/p/w500/\" + image} alt=\"\" width=\"200\"></img>\r\n                <h1 className=\"Movie-title\">{title}</h1>\r\n            \r\n                <p className=\"Movie-release\">{release}</p>\r\n            </div>\r\n        </Link>\r\n    );\r\n}\r\n\r\nexport default MovieCard;","import React, {useState, useEffect} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useHistory\n} from \"react-router-dom\";\nimport './App.css';\nimport MovieCard from './components/MovieCard.js';\nimport ironManPic from './resources/Iron_man.png';\n\nrequire('dotenv').config();\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\n\nconst App = () => {\n\n  var tabs = [\n    {\n      heading: \"Most Popular\",\n      API_URL: \"https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=\"+API_KEY\n    },\n    {\n      heading: \"Highest Voted\",\n      API_URL: \"https://api.themoviedb.org/3/discover/movie?sort_by=vote_count.desc&api_key=\"+API_KEY\n    }\n  ];\n\n  var genres = [\n    {\n      genre: \"Comedy\"\n    }\n  ]\n\n  const [movies, setMovies] = useState([]); \n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  let movieSearch = \"\";\n  const [chosenMovie, setChosenMovie] = useState({\n    title: \"\",\n    overview: \"\",\n    release_date: \"\",\n    backdrop_path: \"\"\n  });\n  \n \n  useEffect(() => {\n    console.log(\"Search: \" + query);\n    if(query === \"\"){\n      //getData(tabs[0].API_URL);\n    }else{\n      getData(\"https://api.themoviedb.org/3/search/movie?&api_key=\"+API_KEY+\"&query=\"+query);\n    }\n  }, [query]);\n\n  var changeSearch = e => {\n    movieSearch = e.target.value;\n   \n    //setSearch(e.target.value);\n  }\n\n  var submitSearch = () => {\n    setQuery(movieSearch);\n  }\n\n  async function getData(url){\n\n    var response = await fetch(url);\n    var data = await response.json()\n    \n    var results = data.results;\n    for(var i = results.length-1; i >= 0; i--){\n      \n      if(typeof(results[i].poster_path) != typeof(\" \")){\n        console.log(results[i].poster_path);\n        results.pop(i);\n      }\n    }\n\n    setMovies(results);\n    console.log(results);\n  }\n\n  const LandingPage = () => {\n    return(\n    <div className=\"landing-page\">\n      <div className=\"background-circle circle1\"></div>  \n      <div className=\"background-circle circle2\"></div>  \n      <div className=\"background-circle circle3\"></div>  \n      <img className=\"iron-man\" src={ironManPic}></img>\n      <div className=\"title\">\n        <h1>Browse your favourite movies</h1>\n        <h2>Discover your next watch</h2>\n      </div>\n    </div>\n    );\n  }\n\n  const MoviePage = () => {\n    return(\n      <div className=\"App\">\n        <LandingPage></LandingPage>\n        <div id=\"Navbar\">\n          <div className=\"search-container\">\n            <input className=\"search-bar\" onChange={changeSearch} onSubmit={submitSearch} id=\"search-bar\" placeholder=\"Search\"></input>\n            <a href=\"#Navbar\">    \n              <button className=\"submit-search\" onClick={submitSearch}>â–·</button>\n            </a>\n          </div>\n          <div className=\"buttons\">\n            <a href=\"#Navbar\">\n              <h1 onClick={()=>{getData(tabs[0].API_URL)}}>{tabs[0].heading}</h1>\n            </a>\n            <a href=\"#Navbar\">  \n              <h1 onClick={()=>{getData(tabs[1].API_URL)}}>{tabs[1].heading}</h1>\n            </a>  \n          </div>\n        </div>\n        <div id=\"Movies-container\">\n          {movies.map(movie => (\n            \n            <MovieCard \n            key = {movie.id}\n            image = {movie.poster_path}\n            title = {movie.title}\n            description = {movie.overview}\n            release = {movie.release_date}\n            setMovie = {() => setCurrentMovie(movie)}\n            />\n            \n            ))}\n\n        </div>\n      </div>\n    );\n  }\n\n  let setCurrentMovie = (m) => {\n    setChosenMovie(m);\n    console.log(m.title);\n    \n  }\n\n  \n\n  const MovieInfo = (\n    {title,\n    backdrop,\n    overview,\n    release_date}\n  ) => {\n    console.log(backdrop)\n    return(\n      <div>\n        <img className=\"Movie-poster\" src={\"https://image.tmdb.org/t/p/w1280/\" + backdrop} alt=\"\" style={{width: \"100%\", position: \"fixed\", zIndex:\"0\"}}></img>\n        <div style={{width:\"100%\", height: \"50%\", backgroundColor: \"rgba(0,0,20,0.9)\", position:\"absolute\", top: \"50%\", color:\"white\"}}>\n          <Link to=\"/movie_app\" style={{color:\"white\",textDecoration:\"none\"}}><h3 style={{margin: \"20px\", fontSize:\"1rem\"}}>Back</h3></Link>\n          <h1 style={{margin: \"20px\", fontSize:\"2rem\"}}>{title}</h1>\n          <p style={{margin: \"20px\", fontSize:\"1rem\"}}>{overview}</p>\n          <p style={{margin: \"40px\", fontSize:\"1rem\"}}>Release Date: {release_date}</p>\n          \n        </div>\n      </div>\n    )\n  }\n  return (\n      <Router>\n      <Switch>\n        <Route exact path=\"/movie_app\">\n          <MoviePage/>\n        </Route>\n        <Route path=\"/movie_app/info\">\n          <MovieInfo\n            title = {chosenMovie.title}\n            backdrop = {chosenMovie.backdrop_path}\n            overview = {chosenMovie.overview}\n            release_date = {chosenMovie.release_date}\n          />\n        </Route>   \n      </Switch>\n    </Router>\n      \n  );\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}