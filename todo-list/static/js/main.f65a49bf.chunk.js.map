{"version":3,"sources":["resources/check.png","components/ToDo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ToDo","index","ticked","content","deleteFunc","swap","checkboxId","className","id","onClick","box","document","getElementById","style","color","App","useState","toDoItem","setToDoItem","toDoList","setList","useEffect","console","log","deleteItem","deleted","newList","splice","swapItems","dir","length","a","b","autocomplete","name","type","onChange","e","target","value","htmlFor","map","td","key","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,mC,8FC4C5BC,G,YAxCJ,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,MAAMC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,WAAYC,EAAS,EAATA,KACxCC,EAAa,WAAWL,EAC5B,OACI,yBAAKM,UAAU,cACX,yBAAKA,UAAU,kBACX,yBAAKC,GAAIF,EAAYC,UAAU,MAAME,QAAS,WAC1C,IAAIC,EAAMC,SAASC,eAAeN,IACpB,IAAXJ,GACCA,GAAS,EACTQ,EAAIG,MAAMC,MAAQ,kBAElBZ,GAAS,EACTQ,EAAIG,MAAMC,MAAQ,aAGtB,wCAGR,yBAAKP,UAAU,WACX,2BAAIJ,IAGR,yBAAKI,UAAU,UAEX,yBAAKA,UAAU,WAAWE,QAAS,WAAKJ,EAAKJ,GAAQ,KAArD,UAGA,yBAAKM,UAAU,aAAaE,QAAS,WAAKJ,EAAKJ,EAAO,KAAtD,WAIJ,yBAAKM,UAAU,gBAAgBE,QAAS,WACpCL,EAAWH,SCsDZc,MArFf,WAAgB,IAAD,EAIiBC,mBAAS,IAJ1B,mBAIRC,EAJQ,KAIEC,EAJF,OAKSF,mBAAS,IALlB,gCAMaA,mBAAS,KANtB,mBAMRG,EANQ,KAMEC,EANF,KAQbC,qBAAU,WACRC,QAAQC,IAAI,YACX,CAACJ,IAEJ,IAAIK,EAAa,SAACC,GAIhBL,GAAQ,WACNE,QAAQC,IAAIE,GACZ,IAAIC,EAAO,YAAOP,GAElB,OADAO,EAAQC,OAAOF,EAAS,GACjBC,MAIPE,EAAY,SAAC3B,EAAO4B,GACtB,KAAG5B,EAAQ4B,GAAO,GAAK5B,EAAQ4B,EAAMV,EAASW,QAW5C,OAAO,KAVPV,GAAQ,WACN,IAAIM,EAAO,YAAOP,GACdY,EAAIL,EAAQzB,GACZ+B,EAAIN,EAAQzB,EAAQ4B,GAIxB,OAHAH,EAAQzB,GAAS+B,EACjBN,EAAQzB,EAAQ4B,GAAOE,EAEhBL,MAOb,OACE,yBAAKnB,UAAU,OACb,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,mBACb,2BAAOC,GAAG,aAAayB,aAAa,MAAMC,KAAK,aAAaC,KAAK,OAAOC,SAAU,SAAAC,GAChFnB,EAAYmB,EAAEC,OAAOC,UAEvB,2BAAOC,QAAQ,cAAf,YAEA,yBAAKjC,UAAU,eAEjB,6BACE,wBAAIE,QAAS,WAEK,IAAbQ,GACDG,EAAQ,GAAD,mBAAKD,GAAL,CAAeF,KAExBN,SAASC,eAAe,cAAc2B,MAAQ,GAC9CrB,EAAY,MANd,OAYJ,yBAAKX,UAAU,cACZY,EAASsB,KAAI,SAACC,EAAIzC,GAAL,OACV,kBAAC,EAAD,CACA0C,IAAO1C,EACPA,MAASA,EACTE,QAAWuC,EACXxC,QAAU,EACVE,WAAcoB,EACdnB,KAAQuB,YCnEFgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvC,SAASC,eAAe,SD6H3C,kBAAmBuC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.f65a49bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/check.fa65be43.png\";","import React from 'react';\r\nimport check from '../resources/check.png';\r\nimport App from '../App.js';\r\n\r\nvar ToDo = ({index,ticked, content, deleteFunc, swap}) =>{\r\n    var checkboxId = \"checkbox\"+index;\r\n    return(\r\n        <div className=\"To-do-item\">\r\n            <div className=\"To-do-checkbox\">\r\n                <div id={checkboxId} className=\"box\" onClick={()=>{\r\n                    var box = document.getElementById(checkboxId);\r\n                    if(ticked === true){\r\n                        ticked = false;\r\n                        box.style.color = \"rgba(0,0,0,0)\";                        \r\n                    }else{ \r\n                        ticked = true;\r\n                        box.style.color = \"#009533\"; \r\n                    }\r\n                }}>\r\n                    <h2>✓</h2>\r\n                </div>\r\n            </div>  \r\n            <div className=\"To-do-p\">\r\n                <p>{content}</p>\r\n            </div> \r\n            \r\n            <div className=\"arrows\" >\r\n                \r\n                <div className=\"arrow up\" onClick={()=>{swap(index, -1);}}>\r\n                    ∆           \r\n                </div>\r\n                <div className=\"arrow down\" onClick={()=>{swap(index, 1);}}>\r\n                    ∇         \r\n                </div>\r\n            </div>\r\n            <div className=\"delete-button\" onClick={()=>{\r\n                deleteFunc(index);\r\n            }}></div>\r\n        </div>\r\n    \r\n  \r\n    );\r\n}\r\n\r\nexport default ToDo;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport ToDo from './components/ToDo.js'\n\n\nfunction App() {\n\n  \n\n  var [toDoItem, setToDoItem] = useState(\"\");\n  var [item, setItem] = useState(\"\");\n  var [toDoList, setList] = useState([]);\n\n  useEffect(()=>{\n    console.log(\"Update\")\n  }, [toDoList]); \n\n  var deleteItem = (deleted) =>{\n    \n    /*var temp = toDoList;\n    temp.pop(deleted);*/\n    setList(()=>{\n      console.log(deleted);\n      var newList = [...toDoList];\n      newList.splice(deleted, 1);\n      return newList;\n    });\n  }\n\n  var swapItems = (index, dir) => {\n    if(index + dir >= 0 && index + dir < toDoList.length){\n      setList(() => {\n        var newList = [...toDoList];\n        var a = newList[index];\n        var b = newList[index + dir];\n        newList[index] = b;\n        newList[index + dir] = a;\n\n        return newList;\n      });\n    }else{\n      return null;\n    }\n}\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-container\">\n      <div className=\"To-do-container\">\n        <div className=\"Add-to-do\">\n          <div className=\"input-container\">\n            <input id=\"list-input\" autocomplete=\"off\" name=\"list-input\" type=\"text\" onChange={e=>{\n              setToDoItem(e.target.value);\n            }}></input>\n            <label htmlFor=\"list-input\">New task</label>\n\n            <div className=\"underline\"></div>\n          </div>\n          <div>\n            <h1 onClick={()=>{\n              var temp = toDoList;\n              if(toDoItem  != \"\"){\n                setList([...toDoList, toDoItem]);\n              }\n              document.getElementById(\"list-input\").value = \"\"; \n              setToDoItem(\"\");\n            }}>+</h1>\n             \n          </div>\n          \n        </div>\n        <div className=\"To-do-list\">\n          {toDoList.map((td, index) => (\n              <ToDo\n              key = {index}\n              index = {index}\n              content = {td}\n              ticked = {false}\n              deleteFunc = {deleteItem}\n              swap = {swapItems}\n              />\n          ))}\n        </div>\n       \n      </div>\n    </div>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}